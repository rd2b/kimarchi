bundle agent makebackup {
vars:
    any::
        "baculafolder" string => "/etc/bacula";
        "DIRPASSWD"  string => "p1BgtT9k4kmr7G8SS7SqXPlWkCFeNmSWu";
        "DIRMPASSWD" string => "FTVFNk9NUEEFY7lNwKJKl4NESXBKPtQ2X";
        "SDPASSWD"   string => "I7uYy8UJ5gacHa-x55QjPKyfPheSQWCUk";
        "SDMPASSWD"  string => "CfnP_qNDd1QD2kaWHOMiXRD7RJk3dFE55";
        "FDPASSWD"   string => "HyFo__BaxZGn0IH4uJdzIY_SHnpfqOEYD";
        "FDMPASSWD"  string => "aSVRFQuJM6jci6fcfLtIfI1QtRKgSkedr";
    backupmaster::
        "baculaserverpackages" slist => { "bacula-server" };

        "serverfilestocopy" slist => { 
            "$(baculafolder)/bacula-dir.conf",
            "$(baculafolder)/bacula-sd.conf"
        };

        "serverdirstocopy" slist => { 
            "/etc/bacula/clients",
            "/etc/bacula/filesets",
            "/etc/bacula/schedules"
        };

        "clients[host.domain]"   string => "standard";
        "clients[host2.domain2]" string => "standard";
        "clients[back01.acgform.local]" string => "standard";
        "clients[log01.acgform.local]"  string => "standard";

        "serverclientlist" slist => getindices("clients");

        "serverclientinclude" string => "$(baculafolder)/clients/client-list.cula";

    backupclient::
        "baculaclientpackages" slist => { "bacula-fd" };
        "baculadirector"   string => "back01.acgform.local";
        "clientfiledaemon" string => "$(baculafolder)/bacula-fd.conf";

packages:
    backupmaster::
        "$(baculaserverpackages)"
        comment => "install $(baculaserverpackages)",
                package_policy   => "add",
                package_method   => generic;

    backupclient::
        "$(baculaclientpackages)"
        comment => "install $(baculaclientpackages)",
                package_policy   => "add",
                package_method   => generic;

files:
    backupmaster::
        "$(serverfilestocopy)"
           comment   => "Copying $(serverfilestocopy)",
           perms     => promisemode("644"),
           copy_from => secure_cp("$(globals.group_path)/groups/backup/$(serverfilestocopy)","$(globals.serverhost)");


        "$(serverclientinclude)"
            comment   => "Adding new client file to $(serverclientinclude)",
            perms     => promisemode("644"),
            edit_line => append_if_no_lines("@$(baculafolder)/clients/$(serverclientlist).conf");

        "$(baculafolder)/clients/$(serverclientlist).conf"
            create => "true",
            perms     => promisemode("644"),
            edit_defaults => empty,
            edit_line => do_baculaJob(
                    "$(serverclientlist)",
                    "$(clients[$(serverclientlist)])", 
                    "$(FDPASSWD)"),
            comment => "Configuring the client file $(baculafolder)/clients/$(serverclientlist).conf";

        # Surcharge avec les fichiers de clients presents dans les depots
        "$(serverdirstocopy)"
            comment => "Copying $(serverdirstocopy)",
            copy_from => secure_cp("$(globals.group_path)/groups/backup/$(serverdirstocopy)","$(globals.serverhost)"),
            depth_search => recurse("inf");

    backupclient::
        "$(clientfiledaemon)"
           create => "true",
           perms     => promisemode("644"),
           edit_defaults => empty,
           edit_line => do_baculaFileDaemon(
                   "$(baculadirector)",
                   "$(FDPASSWD)",
                   "$(FDMPASSWD)"
                   ),
           comment => "Configuring the client file $(clientfiletocopy)";

}

#######################################################
# Configure the Client file
# Setting the client name value
# Adding a header to tell the file is configured by Cfengine
#######################################################
bundle edit_line do_baculaJob(clientname, clientjob, fd_password) {
insert_lines:
"#############################################################
### This file is configured by Cfengine.
### Manually editing the file might lead Cfengine
### to change back its content
#############################################################
Job {
    Name = \"Job-$(clientname)\"
    JobDefs = \"$(clientjob)\"
    Client = $(clientname)-fd
}
     
# Client (File Services) to backup
Client {
    Name = $(clientname)-fd
    Address = $(clientname)
    FDPort = 9102
    Catalog = MyCatalog
    Password = \"$(fd_password)\"          # password for FileDaemon
    File Retention = 30 days            # 30 days
    Job Retention = 6 months            # six months
    AutoPrune = yes                     # Prune expired Jobs/Files
}
";
}

bundle edit_line do_baculaFileDaemon(directorname, directorpassword, directormonitoringpassword) {
insert_lines:
"#############################################################
### This file is configured by Cfengine.
### Manually editing the file might lead Cfengine
### to change back its content
#############################################################
#
# List Directors who are permitted to contact this File daemon
#
Director {
    Name = $(directorname)-dir
    Password = \"$(directorpassword)\"
}

#
# Restricted Director, used by tray-monitor to get the
#   status of the file daemon
#
Director {
    Name = $(directorname)-mon
    Password = \"$(directormonitoringpassword)\"
    Monitor = yes
}

#
# Global File daemon configuration specifications
#
FileDaemon {                          # this is me
    Name = localhost-fd
    FDport = 9102                  # where we listen for the director
    WorkingDirectory = /var/lib/bacula
    Pid Directory = /var/run/bacula
    Maximum Concurrent Jobs = 20
    FDAddress = 127.0.0.1
}

# Send all messages except skipped files back to Director
Messages {
    Name = Standard
    director = $(directorname)-dir = all, !skipped, !restored
}
";
}

