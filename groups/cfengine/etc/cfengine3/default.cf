bundle agent default
{
classes:
# Classes locales au bundle:

vars:
    any::
#       "filestocopy" slist => {  };
        "dirstocopy"   slist  => { "/etc", "/usr/local/bin" };
        "mysqlsrcdirs" slist  => { "groups/db/etc/mysql", "hosts/$(sys.fqhost)/etc/mysql" };
        "rsyslogdir"   string => "$(globals.group_path)/groups/loghost/etc";

    loghost::
        "rsyslogfile"  string => "server-rsyslog.conf";

    !loghost.!standalone.acgform_local::
        "rsyslogfile"  string =>  "client-rsyslog.conf";

    standalone::
        "rsyslogfile"  string => "standalone-rsyslog.conf";



methods:
    backupmaster|backupclient:: 
        "makebackup"       usebundle => makebackup;
    dns::
        "makednsmaster"    usebundle => makednsmaster;

files:
    any::
#       "$(filestocopy)"
#           comment   => "Copying $(filestocopy)",
#           perms     => promisemode("644"),
#           copy_from => secure_cp("$(globals.group_path)/groups/default/$(filestocopy)","$(globals.serverhost)");

        "$(dirstocopy)"
            comment => "Copying $(dirstocopy)",
            copy_from => secure_cp("$(globals.group_path)/groups/default/$(dirstocopy)","$(globals.serverhost)"),
            depth_search => recurse("inf");

         "/etc/ssh/ssh_host_dsa_key" perms => promisemode("600");
         "/etc/ssh/ssh_host_rsa_key" perms => promisemode("600");
         "/etc/bash.bashrc"          perms => promisemode("644");
         "/etc/sudoers"              perms => promisemode("440");
         "/etc/init.d"               perms => promisemode("755"), depth_search => recurse("inf");

   any::
       "$(dirstocopy)"
        comment => "Copying $(dirstocopy)",
        copy_from => secure_cp("$(globals.group_path)/hosts/${sys.fqhost}/$(dirstocopy)","$(globals.serverhost)"),
        depth_search => recurse("inf");

    loghost|standalone|acgform_local::
        "/etc/rsyslog.conf"
            comment   => "copy loghost/etc/???-rsyslog.conf to /etc",
            perms     => promisemode("644"),
            copy_from => secure_cp("$(globals.group_path)/groups/loghost/etc/$(rsyslogfile)","$(globals.serverhost)");

    acgform_local::
        "/etc/resolv.conf"
                  comment   => "copying /etc/resolv.conf for acgform",
                  perms     => promisemode("644"),
                  copy_from => secure_cp("$(globals.group_path)/groups/acgform/etc/resolv.conf","$(globals.serverhost)");

    cfmaster::
        "/etc/default/cfengine3"
                  comment   => "copy default/cfengine3 to /etc",
                  perms     => promisemode("644"),
                  copy_from => secure_cp("$(globals.group_path)/groups/cfengine/etc/default/cfengine3-master","$(globals.serverhost)");

    !cfmaster.!cfmanual::
        "/etc/default/cfengine3"
                  comment   => "copy default/cfengine3 to /etc",
                  perms     => promisemode("644"),
                  copy_from => secure_cp("$(globals.group_path)/groups/cfengine/etc/default/cfengine3-client","$(globals.serverhost)");

    cfmanual::
        "/etc/default/cfengine3"
                  comment   => "copy default/cfengine3 to /etc",
                  perms     => promisemode("644"),
                  copy_from => secure_cp("$(globals.group_path)/groups/cfengine/etc/default/cfengine3-manual","$(globals.serverhost)");

    mysql::
        "/etc/mysql"
            comment => "Copying files in /etc/mysql",
            perms     => promisemode("600"),
            copy_from => secure_cp("$(globals.group_path)/$(mysqlsrcdirs)","$(globals.serverhost)"),
            depth_search => recurse("inf");

processes:
    !cfmanual:: 
        "/usr/sbin/cf-execd" restart_class => "launchcfengine";
    drop01_acgform_local:: 
        "/home/remi/.dropbox-dist/dropbox" restart_class => "launchdropbox";

commands:
    launchcfengine::
        "/etc/init.d/cfengine3 start";
    launchdropbox::
        "/bin/su - remi -c \"/usr/bin/dropbox start\"";

reports:
    dns::       "I am a DNS";
    cfmaster::  "I am cfengine master";
    !cfmaster:: "I am cfengine slave";
    mysql::     "I am mysql";
    backupmaster::    "I am backup master";
    backupclient::    "I am backup client";

}

body perms promisemode(p)
{
    mode  => "$(p)";
}


bundle agent makebackup {
vars:
    backupmaster::
        "baculaserverpackages" slist => { "bacula-server" };
        "serverClientTemplate" string => "/etc/bacula/templates/TEMPLATE_CLIENT";

        "serverfilestocopy" slist => { 
            "/etc/bacula/bacula-dir.conf",
            "/etc/bacula/bacula-sd.conf",
            "$(serverClientTemplate)"
        };

        "serverdirstocopy" slist => { 
            "/etc/bacula/clients",
            "/etc/bacula/filesets"
        };


        "serverclientlist" slist => { "host.domain", "host2.domain2" };

    backupclient::
        "baculaclientpackages" slist => { "bacula-fd" };
        "clientfilestocopy" slist => { 
            "/etc/bacula/bacula-fd.conf"
        };


packages:
    backupmaster::
        "$(baculaserverpackages)"
        comment => "install $(baculaserverpackages)",
                package_policy   => "add",
                package_method   => generic;

    backupclient::
        "$(baculaclientpackages)"
        comment => "install $(baculaclientpackages)",
                package_policy   => "add",
                package_method   => generic;

files:
    backupmaster::
        "$(serverfilestocopy)"
           comment   => "Copying $(serverfilestocopy)",
           perms     => promisemode("644"),
           copy_from => secure_cp("$(globals.group_path)/groups/backup/$(serverfilestocopy)","$(globals.serverhost)");

        "$(serverdirstocopy)"
            comment => "Copying $(serverdirstocopy)",
            copy_from => secure_cp("$(globals.group_path)/groups/backup/$(serverdirstocopy)","$(globals.serverhost)"),
            depth_search => recurse("inf");

        "/etc/bacula/clients/$(serverclientlist).conf"
            create => "true",
            edit_defaults => empty,
            edit_line => dobaculafd("$(serverclientlist)"),
            comment => "Configuring the client file /etc/bacula/clients/$(serverclientlist).conf";


    backupclient::
        "$(clientfilestocopy)"
           comment   => "Copying $(clientfilestocopy)",
           perms     => promisemode("644"),
           copy_from => secure_cp("$(globals.group_path)/groups/backup/$(clientfilestocopy)","$(globals.serverhost)");

}


bundle agent makednsmaster {
vars:
    dns::
        "dnsfilestocopy"
            slist => { "/etc/bind/acgform.local", "/etc/bind/named.conf.local" };

        "dnsutils" slist => { "bind9", "host" };

files:
    "$(dnsfilestocopy)"
          comment   => "copy $(dnsfilestocopy) to /etc",
          perms     => promisemode("644"),
          copy_from => secure_cp("/data/cf-repos/groups/dns/$(dnsfilestocopy)","$(globals.serverhost)");

packages:
    dns::
        "$(dnsutils)"
        comment => "install $(dnsutils)",
                package_policy   => "add",
                package_method   => generic;
}


#######################################################
# Configure the resolv.conf file
# Setting the search and nameserver values
# Adding a header to tell the file is configured by Cfengine
#######################################################
bundle edit_line dobaculafd(clientname) {
insert_lines:
    "#############################################################
     ### This file is configured by Cfengine.
     ### Manually editing the file might lead Cfengine
     ### to change back its content
     #############################################################
# Client (File Services) to backup
        Client {"
        location => start,
        insert_type => "preserve_block";
    "Name = $(clientname)-fd";
    "Address = $(clientname)";
    "FDPort = 9102
     Catalog = MyCatalog
     Password = \"HyFo__BaxZGn0IH4uJdzIY_SHnpfqOEYD\"          # password for FileDaemon
     File Retention = 30 days            # 30 days
     Job Retention = 6 months            # six months
     AutoPrune = yes                     # Prune expired Jobs/Files
     }"



}

# This body comes from the cfengine_stdlib.cf
body location start {
        before_after => "before";
}
