bundle agent clone_git_repos {
classes:
    "btrfs_is_present" expression => fileexists("/sbin/btrfs");

vars:
    cfmanual|cfmaster::
        "git_monitor"   string => "https://github.com/rd2b/monitor.git";
        "git_cfrepos"   string => "https://github.com/rd2b/kimarchi.git";

    (cfmanual|cfmaster).debian.x86_64.btrfs_is_present::
        "git_btrfsrotate" string => "https://github.com/rd2b/btrfsrotate.git";
        "dir_externals" string => "/data/cfexternals";




methods:
    (cfmanual|cfmaster).!laptop::
        "handlegitmonitor" usebundle => clone_git_repos_project(
                "${dir_externals}", "$(git_monitor)", "root" );
        "handlegitbtrfsrotate" usebundle => clone_git_repos_project(
                "${dir_externals}", "$(git_btrfsrotate)", "root" );
        "handlecfrepos" usebundle => clone_git_repos_project(
                "${dir_externals}", "$(git_cfrepos)", "root" );
}

bundle agent clone_git_repos_project(basepath, repos, user) {
vars:
    "repo_data" string => execresult(
            "/usr/bin/basename $(repos) .git", "noshell");

classes:
    "repo_dir_exists_$(repo_data)" expression => isdir(
            "$(basepath)/$(repo_data)");

files:
# Creates dir if not exists:
    "$(basepath)/."
        create => "true",
        perms => owner("$(user)");

# Handles perm on my Repository folder:
    "$(basepath)/$(repo_data)/."
        perms => owner("$(user)");

# Handles perm in my Repository folder and subfoldders:
    "$(basepath)/$(repo_data)"
        depth_search => recurse("inf"),
        perms => owner("$(user)");


commands:
    "/usr/bin/git clone $(repos)"
        contain => in_dir_and_setuid_sh("$(basepath)", "$(user)"),
        ifvarclass => "!repo_dir_exists_$(repo_data)";

    once_per_hour::
        "/usr/bin/git pull"
            contain => in_dir_and_setuid_sh("$(basepath)/$(repo_data)", "$(user)"),
            action => if_elapsed("60"),
            ifvarclass => "repo_dir_exists_$(repo_data)";
}

