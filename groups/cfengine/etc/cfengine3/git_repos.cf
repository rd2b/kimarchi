bundle agent clone_git_repos {
vars:
    cfmanual|cfmaster::
        "git_monitor" string => "https://github.com/rd2b/monitor.git";
        "git_cfrepos" string => "https://github.com/rd2b/kimarchi.git";

    CFgit.devplatform::
        "username" string => "remi";
        "git_repos_base" string => "/home/$(username)/repositories/";

        "git_repos[0]" string => "git@github.com:rd2b/kimarchi.git";
        "git_repos[1]" string => "git@github.com:rd2b/config.git";

methods:
    CFgit.devplatform::
        "handlerepositories" usebundle => clone_git_repos_project(
                "$(git_repos_base)", "$(git_repos)", "$(username)");

    cfmanual|cfmaster::
        "handlegitmonitor" usebundle => clone_git_repos_project(
                "/data/cfexternals", "$(git_monitor)", "root" );

        "handlecfrepos" usebundle => clone_git_repos_project(
                "/data", "$(git_monitor)", "root" );
}

bundle agent clone_git_repos_project(basepath, repos, user) {
vars:
    "repo_data" string => execresult(
            "/usr/bin/basename $(repos) .git", "noshell");

classes:
    "repo_dir_exists_$(repos_keys)" expression => isdir(
            "$(basepath)/$(repo_data)");

files:
# Creates dir if not exists:
    "$(basepath)/."
        create => "true",
        perms => owner("$(user)");

# Handles perm on my Repository folder:
    "$(basepath)/$(repo_data)/."
        perms => owner("$(user)");

# Handles perm in my Repository folder and subfoldders:
    "$(basepath)/$(repo_data)"
        depth_search => recurse("inf"),
        perms => owner("$(user)");


commands:
    "/usr/bin/git clone $($(repos)[$(repos_keys)])"
        contain => in_dir_and_setuid_sh("$(basepath)", "$(user)"),
        ifvarclass => "!repo_dir_exists_$(repos_keys)";

    "/usr/bin/git pull"
        contain => in_dir_and_setuid_sh("$(basepath)/$(repo_data)", "$(user)"),
        ifvarclass => "repo_dir_exists_$(repos_keys)";
}

